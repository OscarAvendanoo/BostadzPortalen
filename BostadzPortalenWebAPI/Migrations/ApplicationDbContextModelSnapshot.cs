// <auto-generated />
using System;
using BostadzPortalenWebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BostadzPortalenWebAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BostadzPortalenWebAPI.Models.ApiUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("ApiUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BostadzPortalenWebAPI.Models.Municipality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Municipalities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Umeå"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Stockholm"
                        });
                });

            modelBuilder.Entity("BostadzPortalenWebAPI.Models.PropertyForSale", b =>
                {
                    b.Property<int>("PropertyForSaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyForSaleId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("AskingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("LivingArea")
                        .HasColumnType("int");

                    b.Property<decimal>("MonthlyFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<int>("PlotArea")
                        .HasColumnType("int");

                    b.Property<string>("RealtorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SupplementaryArea")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfProperty")
                        .HasColumnType("int");

                    b.Property<int>("YearBuilt")
                        .HasColumnType("int");

                    b.Property<decimal>("YearlyOperatingCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PropertyForSaleId");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("RealtorId");

                    b.ToTable("PropertiesForSale");

                    b.HasData(
                        new
                        {
                            PropertyForSaleId = 1,
                            Address = "Wanker Street 69",
                            AskingPrice = 500000m,
                            Description = "It's a place to live",
                            LivingArea = 24,
                            MonthlyFee = 5000m,
                            MunicipalityId = 1,
                            NumberOfRooms = 1,
                            PlotArea = 8,
                            RealtorId = "92b88e50-795f-4df6-90e0-8a7d9a179cb0",
                            SupplementaryArea = 8,
                            TypeOfProperty = 0,
                            YearBuilt = 1999,
                            YearlyOperatingCost = 1000m
                        },
                        new
                        {
                            PropertyForSaleId = 2,
                            Address = "Kungsgatan 4",
                            AskingPrice = 1000000m,
                            Description = "Fin utsikt",
                            LivingArea = 24,
                            MonthlyFee = 10000m,
                            MunicipalityId = 2,
                            NumberOfRooms = 1,
                            PlotArea = 8,
                            RealtorId = "87efc5ac-77d8-4729-b3d6-3309dc88e88d",
                            SupplementaryArea = 8,
                            TypeOfProperty = 0,
                            YearBuilt = 1999,
                            YearlyOperatingCost = 1000m
                        },
                        new
                        {
                            PropertyForSaleId = 3,
                            Address = "Kungsgatan 16",
                            AskingPrice = 7000000m,
                            Description = "Bättre än kungsgatan 4",
                            LivingArea = 64,
                            MonthlyFee = 10000m,
                            MunicipalityId = 2,
                            NumberOfRooms = 4,
                            PlotArea = 8,
                            RealtorId = "87efc5ac-77d8-4729-b3d6-3309dc88e88d",
                            SupplementaryArea = 8,
                            TypeOfProperty = 2,
                            YearBuilt = 1950,
                            YearlyOperatingCost = 1000m
                        });
                });

            modelBuilder.Entity("BostadzPortalenWebAPI.Models.PropertyImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PropertyForSaleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyForSaleId");

                    b.ToTable("PropertyImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://bilder.hemnet.se/images/itemgallery_cut/8c/db/8cdb9b8866cc65d5ec941a56b31ba634.jpg",
                            PropertyForSaleId = 1
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://bilder.hemnet.se/images/itemgallery_cut/40/f5/40f595711fdb0cc0ebdbd5ee80be8929.jpg",
                            PropertyForSaleId = 2
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://bilder.hemnet.se/images/itemgallery_cut/89/89/898947735c6b46af72a4556dabadf07a.jpg",
                            PropertyForSaleId = 3
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "https://bilder.hemnet.se/images/itemgallery_cut/09/e2/09e29480a003367d9dc3b139de9c416d.jpg",
                            PropertyForSaleId = 1
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "https://qasa-static-prod.s3-eu-west-1.amazonaws.com/img/5c5dd162d2ac084603a87e1c8d9f16bd1d93039a57b06ddca34f8aee46e4b88e.jpg",
                            PropertyForSaleId = 2
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "https://bcdn.se/images/cache/33121851_960x640.jpg",
                            PropertyForSaleId = 3
                        });
                });

            modelBuilder.Entity("BostadzPortalenWebAPI.Models.RealEstateAgency", b =>
                {
                    b.Property<int>("RealEstateAgencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RealEstateAgencyId"));

                    b.Property<string>("AgencyDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgencyLogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgencyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RealEstateAgencyId");

                    b.ToTable("RealEstateAgencies");

                    b.HasData(
                        new
                        {
                            RealEstateAgencyId = 1,
                            AgencyDescription = "Sveriges näst bästa mäklarbyrå",
                            AgencyLogoUrl = "https://driftservice.blob.core.windows.net/agency-home-solution/5f946ff9-b99b-4e50-96f8-492a34ccbd47_logo",
                            AgencyName = "Gottfridsson"
                        },
                        new
                        {
                            RealEstateAgencyId = 2,
                            AgencyDescription = "Skåne är den bästa platsen på Gotland",
                            AgencyLogoUrl = "https://fatcamp.io/xn--mklare-bua.se/images/artiklar/makl.samfundet.jpg?width=1000",
                            AgencyName = "Skanebo"
                        },
                        new
                        {
                            RealEstateAgencyId = 3,
                            AgencyDescription = "Sveriges näst bästa mäklarbyrå",
                            AgencyLogoUrl = "BilderKommerSen",
                            AgencyName = "Gottfridsson"
                        },
                        new
                        {
                            RealEstateAgencyId = 4,
                            AgencyDescription = "Skåne är den bästa platsen på Gotland",
                            AgencyLogoUrl = "BilderKommerSen",
                            AgencyName = "Skanebo"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e6ae5d04-8f49-4b62-bc52-205353eb08dc",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "e11cc563-5369-471e-9792-6255e0d08eaf",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "1e346bcf-ee97-4bb2-ab3e-8d7202fea078",
                            Name = "Realtor",
                            NormalizedName = "REALTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "92b88e50-795f-4df6-90e0-8a7d9a179cb0",
                            RoleId = "e6ae5d04-8f49-4b62-bc52-205353eb08dc"
                        },
                        new
                        {
                            UserId = "92d637e6-6a8d-421e-a118-7a29d0edc1e7",
                            RoleId = "e11cc563-5369-471e-9792-6255e0d08eaf"
                        },
                        new
                        {
                            UserId = "87efc5ac-77d8-4729-b3d6-3309dc88e88d",
                            RoleId = "1e346bcf-ee97-4bb2-ab3e-8d7202fea078"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BostadzPortalenWebAPI.Models.Realtor", b =>
                {
                    b.HasBaseType("BostadzPortalenWebAPI.Models.ApiUser");

                    b.Property<int?>("AgencyId")
                        .HasColumnType("int");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AgencyId");

                    b.HasDiscriminator().HasValue("Realtor");

                    b.HasData(
                        new
                        {
                            Id = "92d637e6-6a8d-421e-a118-7a29d0edc1e7",
                            AccessFailedCount = 0,

                            ConcurrencyStamp = "9ff6afbe-3837-44ab-8e6a-acbc31924078",

                            Email = "admin@demoapi.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@DEMOAPI.COM",
                            NormalizedUserName = "ADMIN@DEMOAPI.COM",

                            PasswordHash = "AQAAAAIAAYagAAAAEK085XKtZ1dnUFnYVC62/Ck3IBu3p1zJGk2DlQ2f0yZFyYr5acxDog1fQJ5wA8/WTQ==",
                            PhoneNumber = "0722661920",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a8f4c930-ac8f-43ef-bcdc-8b6e91517a7d",

                            TwoFactorEnabled = false,
                            UserName = "admin@demoapi.com",
                            AgencyId = 1,
                            ProfileImageUrl = "https://genslerzudansdentistry.com/wp-content/uploads/2015/11/anonymous-user.png"
                        },
                        new
                        {
                            Id = "92b88e50-795f-4df6-90e0-8a7d9a179cb0",
                            AccessFailedCount = 0,

                            ConcurrencyStamp = "26edcf4a-c982-41e7-93fa-30714e109b16",

                            Email = "user@demoapi.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@DEMOAPI.COM",
                            NormalizedUserName = "USER@DEMOAPI.COM",

                            PasswordHash = "AQAAAAIAAYagAAAAEGn3DSRnxWn49s9aEtzho6oS7zuOLNuTuq9bZketlXkqsfnOcTGYCT3Un6EAYMtvSw==",
                            PhoneNumber = "0722661922",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad915a68-f662-4bd1-a4f3-3eca11bb7d01",

                            TwoFactorEnabled = false,
                            UserName = "user@demoapi.com",
                            AgencyId = 1,
                            ProfileImageUrl = "https://bilder.hemnet.se/images/broker_profile_large/9b/10/9b10a04e47ec5804594aef06016ceb5b.jpg"
                        },
                        new
                        {
                            Id = "87efc5ac-77d8-4729-b3d6-3309dc88e88d",
                            AccessFailedCount = 0,

                            ConcurrencyStamp = "ea67ec76-8d47-4152-8c8f-29315492af0e",

                            Email = "realtor@demoapi.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Realtor",
                            LockoutEnabled = false,
                            NormalizedEmail = "REALTOR@DEMOAPI.COM",
                            NormalizedUserName = "REALTOR@DEMOAPI.COM",

                            PasswordHash = "AQAAAAIAAYagAAAAEM27/pMdCP1i+vdxxaiOHi4btcsGXiK+akuE/7ASsi9lcI1FrdZBw62JrgNbGMsEbg==",
                            PhoneNumber = "0722661922",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "76f7a63f-09e2-49bc-ae71-712a547dab17",

                            TwoFactorEnabled = false,
                            UserName = "realtor@demoapi.com",
                            AgencyId = 2,
                            ProfileImageUrl = "https://bilder.hemnet.se/images/broker_profile_large/d8/50/d850bd83227eb78f123af53871614efd.jpg"
                        });
                });

            modelBuilder.Entity("BostadzPortalenWebAPI.Models.PropertyForSale", b =>
                {
                    b.HasOne("BostadzPortalenWebAPI.Models.Municipality", "Municipality")
                        .WithMany("PropertiesForSale")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BostadzPortalenWebAPI.Models.Realtor", "Realtor")
                        .WithMany("Properties")
                        .HasForeignKey("RealtorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipality");

                    b.Navigation("Realtor");
                });

            modelBuilder.Entity("BostadzPortalenWebAPI.Models.PropertyImage", b =>
                {
                    b.HasOne("BostadzPortalenWebAPI.Models.PropertyForSale", "PropertyForSale")
                        .WithMany("ImageUrls")
                        .HasForeignKey("PropertyForSaleId");

                    b.Navigation("PropertyForSale");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BostadzPortalenWebAPI.Models.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BostadzPortalenWebAPI.Models.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BostadzPortalenWebAPI.Models.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BostadzPortalenWebAPI.Models.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BostadzPortalenWebAPI.Models.Realtor", b =>
                {
                    b.HasOne("BostadzPortalenWebAPI.Models.RealEstateAgency", "Agency")
                        .WithMany("AgencyRealtors")
                        .HasForeignKey("AgencyId");

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("BostadzPortalenWebAPI.Models.Municipality", b =>
                {
                    b.Navigation("PropertiesForSale");
                });

            modelBuilder.Entity("BostadzPortalenWebAPI.Models.PropertyForSale", b =>
                {
                    b.Navigation("ImageUrls");
                });

            modelBuilder.Entity("BostadzPortalenWebAPI.Models.RealEstateAgency", b =>
                {
                    b.Navigation("AgencyRealtors");
                });

            modelBuilder.Entity("BostadzPortalenWebAPI.Models.Realtor", b =>
                {
                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
