@page "/properties/details/{Id:int}"
@using BlazorBootstrap
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@using BostadzPortalenClient.Components.R_Estate
@* Author: Johan Nelin *@
@inject IPropertyForSaleService propService
@inject ApiAuthenticationStateProvider AuthenticationStateProvider


<div>
    @if (authState is null)
    {
        <p>Laddar...</p>
    }
    else if (authState.User.Identity.IsAuthenticated)
    {
        //Author: Kevin
        if (realEstate.RealtorId == userId)
        {
            <NavLink class="btn edit-btn" href="@GetLink()">Redigera bostad</NavLink>
        }

        <p />
        <R_EstateDisplayDetails realEstate="realEstate"></R_EstateDisplayDetails>
    }
    else
    {
        <R_EstateDisplayDetails realEstate="realEstate"></R_EstateDisplayDetails>
    }
</div>

@code {

    [Parameter] public int Id { get; set; }
    private PropertyForSaleDetailsDTO realEstate { get; set; }
    public string linkId { get; set; }
    private AuthenticationState? authState;

    private string? userId;
    private ClaimsPrincipal? theUser;

    protected override async Task OnInitializedAsync()
    {
        //JN: check user-token -> FUTURE: make it so that only correct Agency can edit
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        realEstate = await propService.GetPropertyDetailsDTOByIdAsync(Id);

        //Author: Kevin
        var user = authState.User;
        theUser = user;
        userId = user.FindFirst("uid")?.Value;
    }

    private string GetLink()
    {
        linkId = $"/realtor/property/edit/{Id}";
        return linkId;
    }
}


