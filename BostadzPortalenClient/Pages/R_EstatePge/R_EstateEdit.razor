@page "/realtor/property/edit/{Id:int}"
@using AutoMapper
@using BlazorBootstrap
@using static System.Net.WebRequestMethods
@using BostadzPortalenClient.Components.XtoString
@inject IPropertyForSaleService propService
@inject IMapper mapper
@inject NavigationManager navManager
@inject ApiAuthenticationStateProvider stateProvider
@attribute [Authorize(Roles = "Admin, Realtor")]

<!--Author: Kevin and Oscar-->

<h3>@realEstate.Address | @realEstate.MunicipalityName</h3>
<hr />


<EditForm Model="@realEstate" OnValidSubmit="SaveChanges">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="d-flex align-items-start flex-wrap">

        <div class="col-6">

            <div class="form-group fw-bold">
                <label>Adress</label>
                <InputText @bind-Value="realEstate.Address" class="form-control" />
            </div>

            <div class="form-group fw-bold">
                <label>Kommun</label>
                <InputText @bind-Value="realEstate.MunicipalityName" class="form-control" disabled />
            </div>
            <div class="form-group fw-bold">
                <label class="me-3 mb-1">Typ av bostad</label>
                <br />
                <InputSelect @bind-Value="realEstate.TypeOfProperty" class="form-control">
                    @foreach (var type in Enum.GetValues<TypeOfPropertyEnum>())
                    {
                        <option value="@type">@type</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group fw-bold">
                <label>Byggår</label>
                <InputNumber @bind-Value="realEstate.YearBuilt" class="form-control" />
            </div>

            <div class="form-group fw-bold">
                <label>Beskrivning</label>
                <InputTextArea @bind-Value="realEstate.Description" class="form-control" />
            </div>
        </div>
        <div class="d-flex flex-wrap justify-content-center align-items-center col-4 mx-auto">

            <div class="form-group">
                <div class="mt-2 d-flex flex-wrap">
                    @if (realEstate.ImageUrls == null)
                    {
                        <p>Laddar...</p>
                    }
                    else
                    {
                        @foreach (var url in realEstate.ImageUrls)
                        {
                            <div class="position-relative me-2 mb-2" style="cursor: pointer;" @onclick = "@(()=>SelectImage(url.Id))">
                            @* <div class="me-2 mb-2"> *@
                                <img src="@url.ImageUrl" alt="Preview" style="width: 100px; height: 100px; object-fit: cover;" class="img-thumbnail @SelectedImageId == url.Id ? border-primary border-3" />
                                <br />
                                @if(SelectedImageId == url.Id)
                                {
                                    <Button Class="btn btn-danger btn-sm position-absolute top-0 end-0 m-1"  @onclick="async ()=>await RemoveImageUrl(url.Id)">
                                        Ta bort
                                        </Button>
                                }
                                @*    <div class="d-flex justify-content-center mt-1">
                                    <RemoveButton Id="@url.Id" OnRemove="RemoveImageUrl" />
                                </div>
                             </div> *@
                                @* @onclick:stopPropagation="true" *@
                            </div>

                        }
                        <InputText class="form-control" @bind-Value="ImageUrl" placeholder="Enter image URL" />
                        <button class="btn btn-secondary mt-2" type="button" @onclick="AddImageUrl">Ladda upp bild</button>
                    }
                </div>
            </div>

        </div>
    </div>

    <div class="d-flex flex-wrap align-items-start col-12">
        <table class="table mt-3">
            <thead>
                <tr>
                    <th>Pris</th>
                    <th>Hyra</th>
                    <th>Års kostnad</th>
                    <th>Bostadsarea</th>
                    <th>Utomhusarea</th>
                    <th>Tillkommande area</th>
                    <th>Antal rum</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>

                        <InputNumber @bind-Value="realEstate.AskingPrice" class="form-control" placeholder="SEK" />
                    </td>
                    <td>
                        <InputNumber @bind-Value="realEstate.MonthlyFee" class="form-control" placeholder="SEK" />
                    </td>
                    <td>
                        <InputNumber @bind-Value="realEstate.YearlyOperatingCost" class="form-control" placeholder="SEK" />
                    </td>
                    <td>
                        <InputNumber @bind-Value="realEstate.LivingArea" class="form-control" placeholder="KVM" />
                    </td>
                    <td>
                        <InputNumber @bind-Value="realEstate.PlotArea" class="form-control" placeholder="KVM" />
                    </td>
                    <td>
                        <InputNumber @bind-Value="realEstate.SupplementaryArea" class="form-control" placeholder="KVM" />
                    </td>
                    <td>
                        <InputNumber @bind-Value="realEstate.NumberOfRooms" class="form-control" placeholder="KVM" />
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <button type="submit" class="btn main-btn">Spara ändringar</button>
</EditForm>
<div class="mt-3">
    <RemoveButton Id="Id" OnRemove="@RemoveRealEstate" />
</div>


@code {
    [Parameter]
    public int Id { get; set; }
    private string? userId;
    private PropertyForSaleDetailsDTO realEstate { get; set; } = new PropertyForSaleDetailsDTO();
    private PropertyForSaleUpdateDto realEstateUpdated { get; set; } = new PropertyForSaleUpdateDto();
    private string ImageUrl = string.Empty;
    private PropertyImage Image;
    private int? SelectedImageId { get; set; } = null;

    private void SelectImage(int id)
    {
        if (SelectedImageId == id)
        {
            SelectedImageId = null;
        }
        else
        {
            SelectedImageId = id;
        }
    }

    private void AddImageUrl()
    {
        if (!string.IsNullOrWhiteSpace(ImageUrl))
        {
            Image = new PropertyImage
                {
                    ImageUrl = ImageUrl,
                    PropertyForSaleId = realEstateUpdated.PropertyForSaleId
                };
            realEstate.ImageUrls.Add(Image);
            ImageUrl = string.Empty;
        }
    }

    private async Task RemoveImageUrl(int id)
    {

        var imageToRemove = realEstate.ImageUrls.FirstOrDefault(i => i.Id == id);
        if (imageToRemove != null)
        {
            realEstate.ImageUrls.Remove(imageToRemove);
            await propService.UnlinkPicture(id);
        }
        SelectedImageId = null;
        StateHasChanged();

    }


    protected override async Task OnInitializedAsync()
    {
        realEstate = await propService.GetPropertyDetailsDTOByIdAsync(Id);

        var user = await stateProvider.GetAuthenticationStateAsync();
        userId = user.User.FindFirst("uid")?.Value;

    }

    private async Task SaveChanges()
    {
        realEstateUpdated = mapper.Map<PropertyForSaleUpdateDto>(realEstate);

        try
        {
            await propService.UpdatePropertyAsync(Id, realEstateUpdated);

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Misslyckades att uppdatera produkten. {ex.Message}");

        }
        navManager.NavigateTo($"/properties/details/{realEstate.PropertyForSaleId}");


    }
    private async Task RemoveRealEstate(int id)
    {
        try
        {
            await propService.DeletePropertyForSale(id);
            StateHasChanged();
        }
        catch (Exception ex)
        {

            Console.WriteLine($"Delete failed: {ex.Message}");
        }


        navManager.NavigateTo($"/realtorobjects/{userId}");
    }



}
