@page "/property/add"
@using BostadzPortalenClient.Models
@inject IPropertyForSaleService PropertyService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject IMuniService MuniService

@* Author: Jona *@
<h3>Add New Property</h3>

<EditForm Model="newProperty" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Address:</label>
        <InputText class="form-control" @bind-Value="newProperty.Address" />
    </div>

     @* <div class="form-group">
        <label>Municipality ID:</label>
        <InputNumber class="form-control" @bind-Value="newProperty.MunicipalityId" />
    </div>  *@

    <div class="form-group">
        <label>Municipality:</label>
        <InputSelect class="form-control" @bind-Value="newProperty.MunicipalityId">
            <option value="">-- Välj kommun --</option>
            @foreach (var municipality in municipalities)
            {
                <option value="@municipality.Id">@municipality.Name</option>
            }
        </InputSelect>
    </div>


    <div class="form-group">
        <label>Asking Price:</label>
        <InputNumber class="form-control" @bind-Value="newProperty.AskingPrice" />
    </div>

    <div class="form-group">
        <label>Living Area (sqm):</label>
        <InputNumber class="form-control" @bind-Value="newProperty.LivingArea" />
    </div>

    <div class="form-group">
        <label>Supplementary Area (sqm):</label>
        <InputNumber class="form-control" @bind-Value="newProperty.SupplementaryArea" />
    </div>

    <div class="form-group">
        <label>Plot Area (optional):</label>
        <InputNumber class="form-control" @bind-Value="newProperty.PlotArea" />
    </div>

    <div class="form-group">
        <label>Number of Rooms:</label>
        <InputNumber class="form-control" @bind-Value="newProperty.NumberOfRooms" />
    </div>

    <div class="form-group">
        <label>Description:</label>
        <InputTextArea class="form-control" @bind-Value="newProperty.Description" />
    </div>

    <div class="form-group">
        <label>Monthly Fee (optional):</label>
        <InputNumber class="form-control" @bind-Value="newProperty.MonthlyFee" />
    </div>

    <div class="form-group">
        <label>Yearly Operating Cost:</label>
        <InputNumber class="form-control" @bind-Value="newProperty.YearlyOperatingCost" />
    </div>

    <div class="form-group">
        <label>Year Built:</label>
        <InputNumber class="form-control" @bind-Value="newProperty.YearBuilt" />
    </div>

    @* <div class="form-group">
        <label>Type of Property:</label>
        <InputSelect class="form-control" @bind-Value="newProperty.TypeOfProperty">
            @foreach (var val in Enum.GetValues(typeof(TypeOfPropertyEnum)))
            {
                <option value="@val">@val</option>
            }
        </InputSelect>
    </div> *@

    <InputSelect class="form-control" @bind-Value="newProperty.TypeOfProperty">
        @foreach (TypeOfPropertyEnum val in Enum.GetValues(typeof(TypeOfPropertyEnum)))
        {
            <option value="@val">@val</option>
        }
    </InputSelect>


    <div class="form-group">
        <label>Image URL (add multiple):</label>
        <InputText class="form-control" @bind-Value="imageUrl" />
        <button class="btn btn-secondary mt-2" type="button" @onclick="AddImageUrl">Add Image</button>
        <div class="mt-2 d-flex flex-wrap">
            @foreach (var url in newProperty.ImageUrls)
            {
                <div class="me-2 mb-2">
                    <img src="@url" alt="Preview" style="width: 100px; height: 100px; object-fit: cover;" />
                </div>
            }
        </div>
    </div>

    <button class="btn btn-primary mt-3" type="submit">Save</button>
</EditForm>

@if (!string.IsNullOrWhiteSpace(feedbackMessage))
{
    <div class="alert alert-info mt-3">@feedbackMessage</div>
}

@code {
    private CreatePropertyForSaleDTO newProperty = new()
        {
            ImageUrls = new List<string>()
        };

    private string imageUrl = string.Empty;
    private string feedbackMessage = string.Empty;
    private List<Municipality> municipalities = new();

    // Testar denna för att slippa sifforna
    // string GetDisplayName(TypeOfPropertyEnum value)
    // {
    //     return value switch
    //     {
    //         TypeOfPropertyEnum._0 => "Bostadsrättslägenhet",
    //         TypeOfPropertyEnum._1 => "Bostadsrättsradhus",
    //         TypeOfPropertyEnum._2 => "Villa",
    //         TypeOfPropertyEnum._3 => "Fritidshus",
    //         _ => value.ToString()
    //     };
    // }

    protected override async Task OnInitializedAsync()
    {
        var result = await MuniService.GetAllMunicipalityToListAsync();
        if (result.Success && result.Data != null)
        {
            municipalities = result.Data;
        }
    }


    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await PropertyService.AddPropertyForSaleAsync(newProperty);
            if (response)
            {
                feedbackMessage = "✅ Property added successfully!";
                Navigation.NavigateTo("/properties/index");
            }
            else
            {
                feedbackMessage = "❌ Failed to add property.";
            }
        }
        catch (Exception ex)
        {
            feedbackMessage = $"❌ Error: {ex.Message}";
        }
    }

    private void AddImageUrl()
    {
        if (!string.IsNullOrWhiteSpace(imageUrl))
        {
            newProperty.ImageUrls.Add(imageUrl);
            imageUrl = string.Empty;
        }
    }

    private void RemoveImageUrl(string url)
    {
        newProperty.ImageUrls.Remove(url);
    }
}
