<h3>RegisterFirstRealtor</h3>

@code {

}
@page "/users/registerfirstrealtor"
@inject IClient httpClient
@inject IRealtorService RealtorService
@inject NavigationManager navManager

<h3>Register new account</h3>

@if (string.IsNullOrEmpty(message) == false)
{
    <div class="alert alert-danger">
        <p>@message</p>
    </div>
}


<div>
    <EditForm Model="RegistrationModel" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="email">Email Adress</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.Email" />
            <ValidationMessage For="@(() => RegistrationModel.Email)" />
        </div>
        <div class="form-group">
            <label for="firstname">First Name</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.FirstName" />
            <ValidationMessage For="@(() => RegistrationModel.FirstName)" />
        </div>
        <div class="form-group">
            <label for="lastname">Last Name</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.LastName" />
            <ValidationMessage For="@(() => RegistrationModel.LastName)" />
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <InputText class="form-control" type="password" @bind-Value="RegistrationModel.Password" />
            <ValidationMessage For="@(() => RegistrationModel.Password)" />
        </div>
        <div class="form-group">
            <label for="AgencyId">AgencyId</label>
            <InputNumber class="form-control" @bind-Value="RegistrationModel.AgencyId" />
            <ValidationMessage For="@(() => RegistrationModel.AgencyId)" />
        </div>

      

        <button type="submit" class="btn main-btn btn-block mt-3">Register</button>

    </EditForm>
</div>

@code {
    RegisterRealtorDTO RegistrationModel = new RegisterRealtorDTO();
    string message = string.Empty;


    // Author: ALL
    private async Task HandleRegistration()
    {
        try
        {
            await httpClient.RegisterAsync(RegistrationModel);

            navManager.NavigateTo("/users/login");
        }
        catch (ApiException aex)
        {
            if (aex.StatusCode >= 200 && aex.StatusCode <= 299)
            {
                navManager.NavigateTo("/users/login");
            }
            message = aex.Response;

        }
    }
}