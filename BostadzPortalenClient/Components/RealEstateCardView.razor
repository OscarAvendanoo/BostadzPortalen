<!--Author: Kevin-->
@using BostadzPortalenClient.Services
@using Newtonsoft.Json
@inject IPropertyForSaleService propService

<div class="row">
    @foreach (var realEstate in PropertiesForSale)
    {
        <div class="col-sm-3 mb-3 mb-sm-3 mt-4">
            <div class="card" style="width: 18rem;">
                <div class="image-container">
                    <NavLink class="card-img-top" href="/PropertyDetails/realEstate.PropertyForSaleId">
                        <img src="/lyxvilla.jpg" class="card-img-top" alt="lyxvilla">
                    </NavLink>
                    @if (soldProperties.Contains(realEstate.PropertyForSaleId))
                    {
                        <!--Behöver lägga till bool Sold eller nåt för att lagra men detta är väl mest lyxgrej typ-->
                        <div class="sold-overlay">
                            <span>SOLD</span>
                        </div>
                    }
                </div>
                <div class="card-body">
                    <h5 class="card-title">@realEstate.Address</h5>
                    <h5 class="card-title">@realEstate.MunicipalityName</h5>
                </div>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">
                        <div class="model-row">
                            <span style="font-weight:bold;">Byggår</span>
                            <span>@realEstate.YearBuilt</span>
                        </div>
                    </li>
                    <li class="list-group-item">
                        <div class="model-row">
                            <span style="font-weight:bold;">Typ av fastighet</span>
                            <span>@realEstate.TypeOfProperty</span>
                        </div>
                    </li>
                    <li class="list-group-item">
                        <div class="model-row mb-0">
                            <span style="font-weight:bold;">Boendeyta</span>
                            <span><IntToString_m2 inputInt="@realEstate.LivingArea"></IntToString_m2> </span>
                        </div>
                    </li>
                    <li class="list-group-item">
                        <div class="model-row mb-0 mt-3">
                            <span style="font-weight:bold; text-decoration: underline">Utgångspris</span>
                            <span><DecimalToStringSEK inputDecimal="@Convert.ToDecimal(realEstate.AskingPrice)"></DecimalToStringSEK></span>
                        </div>
                    </li>
                </ul>
                @* <RemoveButton Id="@realEstate.PropertyForSaleId" OnRemove="RemoveRealEstate" /> *@
                <button class="btn btn-danger" @onclick="() => MarkAsSold(realEstate.PropertyForSaleId)">Sälj</button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Amount { get; set; }
    private HashSet<int> soldProperties = new();

    [Parameter]
    public string RealtorId { get; set; }

    private List<PropertyForSaleOverviewDTO> PropertiesForSale = new();

    private void MarkAsSold(int propertyId)
    {
        soldProperties.Add(propertyId);
    }

    private async Task LoadRealEstates()
    {
        try
        {
            if (!string.IsNullOrEmpty(RealtorId))
            {
                // Hämtar endast objekt som tillhör den inloggade mäklaren (via token, inte filtrering manuellt)
                // PropertiesForSale = await propService.GetMyListingsAsync();
            }
            else
            {
                var realEstates = await propService.GetAllPropertiesForSaleDTOAsync();

                if (realEstates != null)
                {
                    if (Amount != 0)
                        PropertiesForSale = realEstates.OrderByDescending(r => r.AskingPrice).Take(Amount).ToList();
                    else
                        PropertiesForSale = realEstates.OrderByDescending(r => r.AskingPrice).ToList();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fel vid hämtning av fastigheter: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadRealEstates();
    }

    private async Task RemoveRealEstate(int id)
    {
        await propService.DeletePropertyForSale(id);
        PropertiesForSale.RemoveAll(p => p.PropertyForSaleId == id);
        StateHasChanged();
    }
}
