
<div class="property-list mt-3">
	@foreach (var property in pagedProperties)
	{
		<RealEstateCardComponent realEstate="property"></RealEstateCardComponent>
	}
</div>

<nav class="mt-4">
	<ul class="pagination justify-content-center">
		<li class="page-item @(currentPage == 1 ? "disabled" : "")">
			<button class="page-link" @onclick="PreviousPage">Föregående</button>
		</li>

		@for (int i = 1; i <= totalPages; i++)
		{
			<li class="page-item @(i == currentPage ? "active" : "")">
				<button class="page-link" @onclick="() => GoToPage(i)">@i</button>
			</li>
		}

		<li class="page-item @(currentPage == totalPages ? "disabled" : "")">
			<button class="page-link" @onclick="NextPage">Nästa</button>
		</li>
	</ul>
</nav>



@code {
	[Parameter] public List<PropertyForSaleOverviewDTO> properties { get; set; }
	private List<PropertyForSaleOverviewDTO> pagedProperties = new();
	private int currentPage = 1;
	private int pageSize = 20;
	private int totalPages;

	protected override async Task OnInitializedAsync()
	{
		if (properties != null)
		{
			totalPages = (int)Math.Ceiling((double)properties.Count / pageSize);
			UpdatePagedProperties();
		}
	}

	private void UpdatePagedProperties()
	{
		pagedProperties = properties
			.Skip((currentPage - 1) * pageSize)
			.Take(pageSize)
			.ToList();
	}

	private void GoToPage(int pageNumber)
	{
		currentPage = pageNumber;
		UpdatePagedProperties();
	}

	private void NextPage()
	{
		if (currentPage < totalPages)
		{
			currentPage++;
			UpdatePagedProperties();
		}
	}

	private void PreviousPage()
	{
		if (currentPage > 1)
		{
			currentPage--;
			UpdatePagedProperties();
		}
	}
}
